"use strict";

function sort(str_numbers) {
	var mas_numb = [], count_numb = [], sort_numb = [];
	var i, j;
	var str_buff = "";

	// Заполняем неотсортированный массив значениями из строки.
	// Метод split() в данном случае не подходит, т.к. разделители могут быть любыми.
	str_numbers += " "; // Для обработки последнего символа, если это число
	for (i = 0; i < str_numbers.length; i++) {
		if (!isNaN(str_numbers[i]) && str_numbers[i] !== " ") {
			str_buff += str_numbers[i];
		} else if (str_buff > 0) {
			mas_numb.push(+str_buff);
			str_buff = "";
		}
	}
	// Сортировка массива по весу элементов. Задача специфическая, в отдельную функцию выносить смысла нет.
	// Существующий метод sort(), даже если задать свою функцию сравнения, не подходит, т.к. нужно учитывать индекс.
	// Использовал достаточно простой и понятный алгоритм сортировки. Задаем начальные значения индексов.
	for (i = 0; i < mas_numb.length; i++) {
		count_numb[i] = 0;
	}
	// Выполняем сортировку в соответствии с заданием
	for (i = 0; i < mas_numb.length-1; i++) {
		for (j = i + 1; j < mas_numb.length; j++)	{
			if ((mas_numb[i] * (i + 1)) < (mas_numb[j] * (j + 1))) {
				count_numb[j]++;
			}	else {
				count_numb[i]++;
			}
		}
	}
	// Выводим результат в отдельный массив
	for (var i = 0; i < mas_numb.length; i++) {
		sort_numb[count_numb[i]] = mas_numb[i];
	}
	// Возвращаем результат функции
	return sort_numb.reverse();
}

// Проверяем работу функции
alert(
	"По заданию:\n" +
	"\"5  3 30 25 \" - \"" + sort("5  3 30 25 ") + "\"\n" +
	"\"   \" - \"" + sort("   ") + "\"\n" +
	"От себя:\n" +
	"\"вася15 и пет9\" - \"" + sort("вася15 и пет9") + "\"\n" +
	"\"\" - \"" + sort("") + "\"\n" +
	"\"15-8-6-5-2\" - \"" + sort("15-8-6-5-2") + "\""
);
